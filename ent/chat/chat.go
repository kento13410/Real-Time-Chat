// Code generated by ent, DO NOT EDIT.

package chat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chat type in the database.
	Label = "chat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// EdgeSentUser holds the string denoting the sent_user edge name in mutations.
	EdgeSentUser = "sent_user"
	// EdgeReceivedUser holds the string denoting the received_user edge name in mutations.
	EdgeReceivedUser = "received_user"
	// Table holds the table name of the chat in the database.
	Table = "chats"
	// SentUserTable is the table that holds the sent_user relation/edge.
	SentUserTable = "chats"
	// SentUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SentUserInverseTable = "users"
	// SentUserColumn is the table column denoting the sent_user relation/edge.
	SentUserColumn = "user_sent_messages"
	// ReceivedUserTable is the table that holds the received_user relation/edge.
	ReceivedUserTable = "chats"
	// ReceivedUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReceivedUserInverseTable = "users"
	// ReceivedUserColumn is the table column denoting the received_user relation/edge.
	ReceivedUserColumn = "user_received_messages"
)

// Columns holds all SQL columns for chat fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldSentAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_sent_messages",
	"user_received_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSentAt holds the default value on creation for the "sent_at" field.
	DefaultSentAt func() time.Time
)

// OrderOption defines the ordering options for the Chat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// BySentUserField orders the results by sent_user field.
func BySentUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceivedUserField orders the results by received_user field.
func ByReceivedUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceivedUserStep(), sql.OrderByField(field, opts...))
	}
}
func newSentUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SentUserTable, SentUserColumn),
	)
}
func newReceivedUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceivedUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReceivedUserTable, ReceivedUserColumn),
	)
}
