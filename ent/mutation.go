// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Real-Time-Chat/ent/chat"
	"Real-Time-Chat/ent/predicate"
	"Real-Time-Chat/ent/user"
	"Real-Time-Chat/ent/userrelation"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChat         = "Chat"
	TypeUser         = "User"
	TypeUserRelation = "UserRelation"
)

// ChatMutation represents an operation that mutates the Chat nodes in the graph.
type ChatMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	message              *string
	sent_at              *time.Time
	clearedFields        map[string]struct{}
	sent_user            *int
	clearedsent_user     bool
	received_user        *int
	clearedreceived_user bool
	done                 bool
	oldValue             func(context.Context) (*Chat, error)
	predicates           []predicate.Chat
}

var _ ent.Mutation = (*ChatMutation)(nil)

// chatOption allows management of the mutation configuration using functional options.
type chatOption func(*ChatMutation)

// newChatMutation creates new mutation for the Chat entity.
func newChatMutation(c config, op Op, opts ...chatOption) *ChatMutation {
	m := &ChatMutation{
		config:        c,
		op:            op,
		typ:           TypeChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatID sets the ID field of the mutation.
func withChatID(id int) chatOption {
	return func(m *ChatMutation) {
		var (
			err   error
			once  sync.Once
			value *Chat
		)
		m.oldValue = func(ctx context.Context) (*Chat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChat sets the old Chat of the mutation.
func withChat(node *Chat) chatOption {
	return func(m *ChatMutation) {
		m.oldValue = func(context.Context) (*Chat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *ChatMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ChatMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *ChatMutation) ResetMessage() {
	m.message = nil
}

// SetSentAt sets the "sent_at" field.
func (m *ChatMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *ChatMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *ChatMutation) ResetSentAt() {
	m.sent_at = nil
}

// SetSentUserID sets the "sent_user" edge to the User entity by id.
func (m *ChatMutation) SetSentUserID(id int) {
	m.sent_user = &id
}

// ClearSentUser clears the "sent_user" edge to the User entity.
func (m *ChatMutation) ClearSentUser() {
	m.clearedsent_user = true
}

// SentUserCleared reports if the "sent_user" edge to the User entity was cleared.
func (m *ChatMutation) SentUserCleared() bool {
	return m.clearedsent_user
}

// SentUserID returns the "sent_user" edge ID in the mutation.
func (m *ChatMutation) SentUserID() (id int, exists bool) {
	if m.sent_user != nil {
		return *m.sent_user, true
	}
	return
}

// SentUserIDs returns the "sent_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SentUserID instead. It exists only for internal usage by the builders.
func (m *ChatMutation) SentUserIDs() (ids []int) {
	if id := m.sent_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSentUser resets all changes to the "sent_user" edge.
func (m *ChatMutation) ResetSentUser() {
	m.sent_user = nil
	m.clearedsent_user = false
}

// SetReceivedUserID sets the "received_user" edge to the User entity by id.
func (m *ChatMutation) SetReceivedUserID(id int) {
	m.received_user = &id
}

// ClearReceivedUser clears the "received_user" edge to the User entity.
func (m *ChatMutation) ClearReceivedUser() {
	m.clearedreceived_user = true
}

// ReceivedUserCleared reports if the "received_user" edge to the User entity was cleared.
func (m *ChatMutation) ReceivedUserCleared() bool {
	return m.clearedreceived_user
}

// ReceivedUserID returns the "received_user" edge ID in the mutation.
func (m *ChatMutation) ReceivedUserID() (id int, exists bool) {
	if m.received_user != nil {
		return *m.received_user, true
	}
	return
}

// ReceivedUserIDs returns the "received_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceivedUserID instead. It exists only for internal usage by the builders.
func (m *ChatMutation) ReceivedUserIDs() (ids []int) {
	if id := m.received_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceivedUser resets all changes to the "received_user" edge.
func (m *ChatMutation) ResetReceivedUser() {
	m.received_user = nil
	m.clearedreceived_user = false
}

// Where appends a list predicates to the ChatMutation builder.
func (m *ChatMutation) Where(ps ...predicate.Chat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chat).
func (m *ChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.message != nil {
		fields = append(fields, chat.FieldMessage)
	}
	if m.sent_at != nil {
		fields = append(fields, chat.FieldSentAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chat.FieldMessage:
		return m.Message()
	case chat.FieldSentAt:
		return m.SentAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chat.FieldMessage:
		return m.OldMessage(ctx)
	case chat.FieldSentAt:
		return m.OldSentAt(ctx)
	}
	return nil, fmt.Errorf("unknown Chat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chat.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case chat.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMutation) ResetField(name string) error {
	switch name {
	case chat.FieldMessage:
		m.ResetMessage()
		return nil
	case chat.FieldSentAt:
		m.ResetSentAt()
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sent_user != nil {
		edges = append(edges, chat.EdgeSentUser)
	}
	if m.received_user != nil {
		edges = append(edges, chat.EdgeReceivedUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chat.EdgeSentUser:
		if id := m.sent_user; id != nil {
			return []ent.Value{*id}
		}
	case chat.EdgeReceivedUser:
		if id := m.received_user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsent_user {
		edges = append(edges, chat.EdgeSentUser)
	}
	if m.clearedreceived_user {
		edges = append(edges, chat.EdgeReceivedUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMutation) EdgeCleared(name string) bool {
	switch name {
	case chat.EdgeSentUser:
		return m.clearedsent_user
	case chat.EdgeReceivedUser:
		return m.clearedreceived_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMutation) ClearEdge(name string) error {
	switch name {
	case chat.EdgeSentUser:
		m.ClearSentUser()
		return nil
	case chat.EdgeReceivedUser:
		m.ClearReceivedUser()
		return nil
	}
	return fmt.Errorf("unknown Chat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMutation) ResetEdge(name string) error {
	switch name {
	case chat.EdgeSentUser:
		m.ResetSentUser()
		return nil
	case chat.EdgeReceivedUser:
		m.ResetReceivedUser()
		return nil
	}
	return fmt.Errorf("unknown Chat edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	username                 *string
	password_hash            *string
	created_at               *time.Time
	clearedFields            map[string]struct{}
	user_relations_1         map[int]struct{}
	removeduser_relations_1  map[int]struct{}
	cleareduser_relations_1  bool
	user_relations_2         map[int]struct{}
	removeduser_relations_2  map[int]struct{}
	cleareduser_relations_2  bool
	sent_messages            map[int]struct{}
	removedsent_messages     map[int]struct{}
	clearedsent_messages     bool
	received_messages        map[int]struct{}
	removedreceived_messages map[int]struct{}
	clearedreceived_messages bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddUserRelations1IDs adds the "user_relations_1" edge to the UserRelation entity by ids.
func (m *UserMutation) AddUserRelations1IDs(ids ...int) {
	if m.user_relations_1 == nil {
		m.user_relations_1 = make(map[int]struct{})
	}
	for i := range ids {
		m.user_relations_1[ids[i]] = struct{}{}
	}
}

// ClearUserRelations1 clears the "user_relations_1" edge to the UserRelation entity.
func (m *UserMutation) ClearUserRelations1() {
	m.cleareduser_relations_1 = true
}

// UserRelations1Cleared reports if the "user_relations_1" edge to the UserRelation entity was cleared.
func (m *UserMutation) UserRelations1Cleared() bool {
	return m.cleareduser_relations_1
}

// RemoveUserRelations1IDs removes the "user_relations_1" edge to the UserRelation entity by IDs.
func (m *UserMutation) RemoveUserRelations1IDs(ids ...int) {
	if m.removeduser_relations_1 == nil {
		m.removeduser_relations_1 = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_relations_1, ids[i])
		m.removeduser_relations_1[ids[i]] = struct{}{}
	}
}

// RemovedUserRelations1 returns the removed IDs of the "user_relations_1" edge to the UserRelation entity.
func (m *UserMutation) RemovedUserRelations1IDs() (ids []int) {
	for id := range m.removeduser_relations_1 {
		ids = append(ids, id)
	}
	return
}

// UserRelations1IDs returns the "user_relations_1" edge IDs in the mutation.
func (m *UserMutation) UserRelations1IDs() (ids []int) {
	for id := range m.user_relations_1 {
		ids = append(ids, id)
	}
	return
}

// ResetUserRelations1 resets all changes to the "user_relations_1" edge.
func (m *UserMutation) ResetUserRelations1() {
	m.user_relations_1 = nil
	m.cleareduser_relations_1 = false
	m.removeduser_relations_1 = nil
}

// AddUserRelations2IDs adds the "user_relations_2" edge to the UserRelation entity by ids.
func (m *UserMutation) AddUserRelations2IDs(ids ...int) {
	if m.user_relations_2 == nil {
		m.user_relations_2 = make(map[int]struct{})
	}
	for i := range ids {
		m.user_relations_2[ids[i]] = struct{}{}
	}
}

// ClearUserRelations2 clears the "user_relations_2" edge to the UserRelation entity.
func (m *UserMutation) ClearUserRelations2() {
	m.cleareduser_relations_2 = true
}

// UserRelations2Cleared reports if the "user_relations_2" edge to the UserRelation entity was cleared.
func (m *UserMutation) UserRelations2Cleared() bool {
	return m.cleareduser_relations_2
}

// RemoveUserRelations2IDs removes the "user_relations_2" edge to the UserRelation entity by IDs.
func (m *UserMutation) RemoveUserRelations2IDs(ids ...int) {
	if m.removeduser_relations_2 == nil {
		m.removeduser_relations_2 = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_relations_2, ids[i])
		m.removeduser_relations_2[ids[i]] = struct{}{}
	}
}

// RemovedUserRelations2 returns the removed IDs of the "user_relations_2" edge to the UserRelation entity.
func (m *UserMutation) RemovedUserRelations2IDs() (ids []int) {
	for id := range m.removeduser_relations_2 {
		ids = append(ids, id)
	}
	return
}

// UserRelations2IDs returns the "user_relations_2" edge IDs in the mutation.
func (m *UserMutation) UserRelations2IDs() (ids []int) {
	for id := range m.user_relations_2 {
		ids = append(ids, id)
	}
	return
}

// ResetUserRelations2 resets all changes to the "user_relations_2" edge.
func (m *UserMutation) ResetUserRelations2() {
	m.user_relations_2 = nil
	m.cleareduser_relations_2 = false
	m.removeduser_relations_2 = nil
}

// AddSentMessageIDs adds the "sent_messages" edge to the Chat entity by ids.
func (m *UserMutation) AddSentMessageIDs(ids ...int) {
	if m.sent_messages == nil {
		m.sent_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.sent_messages[ids[i]] = struct{}{}
	}
}

// ClearSentMessages clears the "sent_messages" edge to the Chat entity.
func (m *UserMutation) ClearSentMessages() {
	m.clearedsent_messages = true
}

// SentMessagesCleared reports if the "sent_messages" edge to the Chat entity was cleared.
func (m *UserMutation) SentMessagesCleared() bool {
	return m.clearedsent_messages
}

// RemoveSentMessageIDs removes the "sent_messages" edge to the Chat entity by IDs.
func (m *UserMutation) RemoveSentMessageIDs(ids ...int) {
	if m.removedsent_messages == nil {
		m.removedsent_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sent_messages, ids[i])
		m.removedsent_messages[ids[i]] = struct{}{}
	}
}

// RemovedSentMessages returns the removed IDs of the "sent_messages" edge to the Chat entity.
func (m *UserMutation) RemovedSentMessagesIDs() (ids []int) {
	for id := range m.removedsent_messages {
		ids = append(ids, id)
	}
	return
}

// SentMessagesIDs returns the "sent_messages" edge IDs in the mutation.
func (m *UserMutation) SentMessagesIDs() (ids []int) {
	for id := range m.sent_messages {
		ids = append(ids, id)
	}
	return
}

// ResetSentMessages resets all changes to the "sent_messages" edge.
func (m *UserMutation) ResetSentMessages() {
	m.sent_messages = nil
	m.clearedsent_messages = false
	m.removedsent_messages = nil
}

// AddReceivedMessageIDs adds the "received_messages" edge to the Chat entity by ids.
func (m *UserMutation) AddReceivedMessageIDs(ids ...int) {
	if m.received_messages == nil {
		m.received_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.received_messages[ids[i]] = struct{}{}
	}
}

// ClearReceivedMessages clears the "received_messages" edge to the Chat entity.
func (m *UserMutation) ClearReceivedMessages() {
	m.clearedreceived_messages = true
}

// ReceivedMessagesCleared reports if the "received_messages" edge to the Chat entity was cleared.
func (m *UserMutation) ReceivedMessagesCleared() bool {
	return m.clearedreceived_messages
}

// RemoveReceivedMessageIDs removes the "received_messages" edge to the Chat entity by IDs.
func (m *UserMutation) RemoveReceivedMessageIDs(ids ...int) {
	if m.removedreceived_messages == nil {
		m.removedreceived_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.received_messages, ids[i])
		m.removedreceived_messages[ids[i]] = struct{}{}
	}
}

// RemovedReceivedMessages returns the removed IDs of the "received_messages" edge to the Chat entity.
func (m *UserMutation) RemovedReceivedMessagesIDs() (ids []int) {
	for id := range m.removedreceived_messages {
		ids = append(ids, id)
	}
	return
}

// ReceivedMessagesIDs returns the "received_messages" edge IDs in the mutation.
func (m *UserMutation) ReceivedMessagesIDs() (ids []int) {
	for id := range m.received_messages {
		ids = append(ids, id)
	}
	return
}

// ResetReceivedMessages resets all changes to the "received_messages" edge.
func (m *UserMutation) ResetReceivedMessages() {
	m.received_messages = nil
	m.clearedreceived_messages = false
	m.removedreceived_messages = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user_relations_1 != nil {
		edges = append(edges, user.EdgeUserRelations1)
	}
	if m.user_relations_2 != nil {
		edges = append(edges, user.EdgeUserRelations2)
	}
	if m.sent_messages != nil {
		edges = append(edges, user.EdgeSentMessages)
	}
	if m.received_messages != nil {
		edges = append(edges, user.EdgeReceivedMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserRelations1:
		ids := make([]ent.Value, 0, len(m.user_relations_1))
		for id := range m.user_relations_1 {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserRelations2:
		ids := make([]ent.Value, 0, len(m.user_relations_2))
		for id := range m.user_relations_2 {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSentMessages:
		ids := make([]ent.Value, 0, len(m.sent_messages))
		for id := range m.sent_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReceivedMessages:
		ids := make([]ent.Value, 0, len(m.received_messages))
		for id := range m.received_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeduser_relations_1 != nil {
		edges = append(edges, user.EdgeUserRelations1)
	}
	if m.removeduser_relations_2 != nil {
		edges = append(edges, user.EdgeUserRelations2)
	}
	if m.removedsent_messages != nil {
		edges = append(edges, user.EdgeSentMessages)
	}
	if m.removedreceived_messages != nil {
		edges = append(edges, user.EdgeReceivedMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserRelations1:
		ids := make([]ent.Value, 0, len(m.removeduser_relations_1))
		for id := range m.removeduser_relations_1 {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserRelations2:
		ids := make([]ent.Value, 0, len(m.removeduser_relations_2))
		for id := range m.removeduser_relations_2 {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSentMessages:
		ids := make([]ent.Value, 0, len(m.removedsent_messages))
		for id := range m.removedsent_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReceivedMessages:
		ids := make([]ent.Value, 0, len(m.removedreceived_messages))
		for id := range m.removedreceived_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser_relations_1 {
		edges = append(edges, user.EdgeUserRelations1)
	}
	if m.cleareduser_relations_2 {
		edges = append(edges, user.EdgeUserRelations2)
	}
	if m.clearedsent_messages {
		edges = append(edges, user.EdgeSentMessages)
	}
	if m.clearedreceived_messages {
		edges = append(edges, user.EdgeReceivedMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserRelations1:
		return m.cleareduser_relations_1
	case user.EdgeUserRelations2:
		return m.cleareduser_relations_2
	case user.EdgeSentMessages:
		return m.clearedsent_messages
	case user.EdgeReceivedMessages:
		return m.clearedreceived_messages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserRelations1:
		m.ResetUserRelations1()
		return nil
	case user.EdgeUserRelations2:
		m.ResetUserRelations2()
		return nil
	case user.EdgeSentMessages:
		m.ResetSentMessages()
		return nil
	case user.EdgeReceivedMessages:
		m.ResetReceivedMessages()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserRelationMutation represents an operation that mutates the UserRelation nodes in the graph.
type UserRelationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	clearedFields map[string]struct{}
	user1         *int
	cleareduser1  bool
	user2         *int
	cleareduser2  bool
	done          bool
	oldValue      func(context.Context) (*UserRelation, error)
	predicates    []predicate.UserRelation
}

var _ ent.Mutation = (*UserRelationMutation)(nil)

// userrelationOption allows management of the mutation configuration using functional options.
type userrelationOption func(*UserRelationMutation)

// newUserRelationMutation creates new mutation for the UserRelation entity.
func newUserRelationMutation(c config, op Op, opts ...userrelationOption) *UserRelationMutation {
	m := &UserRelationMutation{
		config:        c,
		op:            op,
		typ:           TypeUserRelation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserRelationID sets the ID field of the mutation.
func withUserRelationID(id int) userrelationOption {
	return func(m *UserRelationMutation) {
		var (
			err   error
			once  sync.Once
			value *UserRelation
		)
		m.oldValue = func(ctx context.Context) (*UserRelation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserRelation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserRelation sets the old UserRelation of the mutation.
func withUserRelation(node *UserRelation) userrelationOption {
	return func(m *UserRelationMutation) {
		m.oldValue = func(context.Context) (*UserRelation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserRelationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserRelationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserRelationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserRelationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserRelation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserRelationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserRelationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserRelation entity.
// If the UserRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRelationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserRelationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUser1ID sets the "user1" edge to the User entity by id.
func (m *UserRelationMutation) SetUser1ID(id int) {
	m.user1 = &id
}

// ClearUser1 clears the "user1" edge to the User entity.
func (m *UserRelationMutation) ClearUser1() {
	m.cleareduser1 = true
}

// User1Cleared reports if the "user1" edge to the User entity was cleared.
func (m *UserRelationMutation) User1Cleared() bool {
	return m.cleareduser1
}

// User1ID returns the "user1" edge ID in the mutation.
func (m *UserRelationMutation) User1ID() (id int, exists bool) {
	if m.user1 != nil {
		return *m.user1, true
	}
	return
}

// User1IDs returns the "user1" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// User1ID instead. It exists only for internal usage by the builders.
func (m *UserRelationMutation) User1IDs() (ids []int) {
	if id := m.user1; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser1 resets all changes to the "user1" edge.
func (m *UserRelationMutation) ResetUser1() {
	m.user1 = nil
	m.cleareduser1 = false
}

// SetUser2ID sets the "user2" edge to the User entity by id.
func (m *UserRelationMutation) SetUser2ID(id int) {
	m.user2 = &id
}

// ClearUser2 clears the "user2" edge to the User entity.
func (m *UserRelationMutation) ClearUser2() {
	m.cleareduser2 = true
}

// User2Cleared reports if the "user2" edge to the User entity was cleared.
func (m *UserRelationMutation) User2Cleared() bool {
	return m.cleareduser2
}

// User2ID returns the "user2" edge ID in the mutation.
func (m *UserRelationMutation) User2ID() (id int, exists bool) {
	if m.user2 != nil {
		return *m.user2, true
	}
	return
}

// User2IDs returns the "user2" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// User2ID instead. It exists only for internal usage by the builders.
func (m *UserRelationMutation) User2IDs() (ids []int) {
	if id := m.user2; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser2 resets all changes to the "user2" edge.
func (m *UserRelationMutation) ResetUser2() {
	m.user2 = nil
	m.cleareduser2 = false
}

// Where appends a list predicates to the UserRelationMutation builder.
func (m *UserRelationMutation) Where(ps ...predicate.UserRelation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserRelationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserRelationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserRelation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserRelationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserRelationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserRelation).
func (m *UserRelationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserRelationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.created_at != nil {
		fields = append(fields, userrelation.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserRelationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userrelation.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserRelationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userrelation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserRelation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRelationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userrelation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserRelation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserRelationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserRelationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRelationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserRelation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserRelationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserRelationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserRelationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserRelation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserRelationMutation) ResetField(name string) error {
	switch name {
	case userrelation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserRelation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserRelationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user1 != nil {
		edges = append(edges, userrelation.EdgeUser1)
	}
	if m.user2 != nil {
		edges = append(edges, userrelation.EdgeUser2)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserRelationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userrelation.EdgeUser1:
		if id := m.user1; id != nil {
			return []ent.Value{*id}
		}
	case userrelation.EdgeUser2:
		if id := m.user2; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserRelationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserRelationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserRelationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser1 {
		edges = append(edges, userrelation.EdgeUser1)
	}
	if m.cleareduser2 {
		edges = append(edges, userrelation.EdgeUser2)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserRelationMutation) EdgeCleared(name string) bool {
	switch name {
	case userrelation.EdgeUser1:
		return m.cleareduser1
	case userrelation.EdgeUser2:
		return m.cleareduser2
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserRelationMutation) ClearEdge(name string) error {
	switch name {
	case userrelation.EdgeUser1:
		m.ClearUser1()
		return nil
	case userrelation.EdgeUser2:
		m.ClearUser2()
		return nil
	}
	return fmt.Errorf("unknown UserRelation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserRelationMutation) ResetEdge(name string) error {
	switch name {
	case userrelation.EdgeUser1:
		m.ResetUser1()
		return nil
	case userrelation.EdgeUser2:
		m.ResetUser2()
		return nil
	}
	return fmt.Errorf("unknown UserRelation edge %s", name)
}
