// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	ent "Real-Time-Chat/ent"
	userrelations "Real-Time-Chat/ent/userrelations"
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strconv "strconv"
)

// UserRelationsService implements UserRelationsServiceServer
type UserRelationsService struct {
	client *ent.Client
	UnimplementedUserRelationsServiceServer
}

// NewUserRelationsService returns a new UserRelationsService
func NewUserRelationsService(client *ent.Client) *UserRelationsService {
	return &UserRelationsService{
		client: client,
	}
}

// toProtoUserRelations transforms the ent type to the pb type
func toProtoUserRelations(e *ent.UserRelations) (*UserRelations, error) {
	v := &UserRelations{}
	id := int64(e.ID)
	v.Id = id
	user_id_1 := int64(e.UserID1)
	v.UserId_1 = user_id_1
	user_id_2 := int64(e.UserID2)
	v.UserId_2 = user_id_2
	return v, nil
}

// toProtoUserRelationsList transforms a list of ent type to a list of pb type
func toProtoUserRelationsList(e []*ent.UserRelations) ([]*UserRelations, error) {
	var pbList []*UserRelations
	for _, entEntity := range e {
		pbEntity, err := toProtoUserRelations(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements UserRelationsServiceServer.Create
func (svc *UserRelationsService) Create(ctx context.Context, req *CreateUserRelationsRequest) (*UserRelations, error) {
	userrelations := req.GetUserRelations()
	m, err := svc.createBuilder(userrelations)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserRelations(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements UserRelationsServiceServer.Get
func (svc *UserRelationsService) Get(ctx context.Context, req *GetUserRelationsRequest) (*UserRelations, error) {
	var (
		err error
		get *ent.UserRelations
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetUserRelationsRequest_VIEW_UNSPECIFIED, GetUserRelationsRequest_BASIC:
		get, err = svc.client.UserRelations.Get(ctx, id)
	case GetUserRelationsRequest_WITH_EDGE_IDS:
		get, err = svc.client.UserRelations.Query().
			Where(userrelations.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoUserRelations(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements UserRelationsServiceServer.Update
func (svc *UserRelationsService) Update(ctx context.Context, req *UpdateUserRelationsRequest) (*UserRelations, error) {
	userrelations := req.GetUserRelations()
	userrelationsID := int(userrelations.GetId())
	m := svc.client.UserRelations.UpdateOneID(userrelationsID)
	userrelationsUserID1 := int(userrelations.GetUserId_1())
	m.SetUserID1(userrelationsUserID1)
	userrelationsUserID2 := int(userrelations.GetUserId_2())
	m.SetUserID2(userrelationsUserID2)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserRelations(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements UserRelationsServiceServer.Delete
func (svc *UserRelationsService) Delete(ctx context.Context, req *DeleteUserRelationsRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.UserRelations.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements UserRelationsServiceServer.List
func (svc *UserRelationsService) List(ctx context.Context, req *ListUserRelationsRequest) (*ListUserRelationsResponse, error) {
	var (
		err      error
		entList  []*ent.UserRelations
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.UserRelations.Query().
		Order(ent.Desc(userrelations.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(userrelations.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListUserRelationsRequest_VIEW_UNSPECIFIED, ListUserRelationsRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListUserRelationsRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoUserRelationsList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListUserRelationsResponse{
			UserRelationsList: protoList,
			NextPageToken:     nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements UserRelationsServiceServer.BatchCreate
func (svc *UserRelationsService) BatchCreate(ctx context.Context, req *BatchCreateUserRelationsSliceRequest) (*BatchCreateUserRelationsSliceResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.UserRelationsCreate, len(requests))
	for i, req := range requests {
		userrelations := req.GetUserRelations()
		var err error
		bulk[i], err = svc.createBuilder(userrelations)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.UserRelations.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoUserRelationsList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateUserRelationsSliceResponse{
			UserRelationsSlice: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *UserRelationsService) createBuilder(userrelations *UserRelations) (*ent.UserRelationsCreate, error) {
	m := svc.client.UserRelations.Create()
	userrelationsUserID1 := int(userrelations.GetUserId_1())
	m.SetUserID1(userrelationsUserID1)
	userrelationsUserID2 := int(userrelations.GetUserId_2())
	m.SetUserID2(userrelationsUserID2)
	return m, nil
}
