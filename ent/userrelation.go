// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Real-Time-Chat/ent/user"
	"Real-Time-Chat/ent/userrelation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserRelation is the model entity for the UserRelation schema.
type UserRelation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserRelationQuery when eager-loading is set.
	Edges                 UserRelationEdges `json:"edges"`
	user_user_relations_1 *int
	user_user_relations_2 *int
	selectValues          sql.SelectValues
}

// UserRelationEdges holds the relations/edges for other nodes in the graph.
type UserRelationEdges struct {
	// User1 holds the value of the user1 edge.
	User1 *User `json:"user1,omitempty"`
	// User2 holds the value of the user2 edge.
	User2 *User `json:"user2,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// User1OrErr returns the User1 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserRelationEdges) User1OrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User1 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User1, nil
	}
	return nil, &NotLoadedError{edge: "user1"}
}

// User2OrErr returns the User2 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserRelationEdges) User2OrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User2 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User2, nil
	}
	return nil, &NotLoadedError{edge: "user2"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserRelation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userrelation.FieldID:
			values[i] = new(sql.NullInt64)
		case userrelation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case userrelation.ForeignKeys[0]: // user_user_relations_1
			values[i] = new(sql.NullInt64)
		case userrelation.ForeignKeys[1]: // user_user_relations_2
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserRelation fields.
func (ur *UserRelation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userrelation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ur.ID = int(value.Int64)
		case userrelation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ur.CreatedAt = value.Time
			}
		case userrelation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_relations_1", value)
			} else if value.Valid {
				ur.user_user_relations_1 = new(int)
				*ur.user_user_relations_1 = int(value.Int64)
			}
		case userrelation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_relations_2", value)
			} else if value.Valid {
				ur.user_user_relations_2 = new(int)
				*ur.user_user_relations_2 = int(value.Int64)
			}
		default:
			ur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserRelation.
// This includes values selected through modifiers, order, etc.
func (ur *UserRelation) Value(name string) (ent.Value, error) {
	return ur.selectValues.Get(name)
}

// QueryUser1 queries the "user1" edge of the UserRelation entity.
func (ur *UserRelation) QueryUser1() *UserQuery {
	return NewUserRelationClient(ur.config).QueryUser1(ur)
}

// QueryUser2 queries the "user2" edge of the UserRelation entity.
func (ur *UserRelation) QueryUser2() *UserQuery {
	return NewUserRelationClient(ur.config).QueryUser2(ur)
}

// Update returns a builder for updating this UserRelation.
// Note that you need to call UserRelation.Unwrap() before calling this method if this UserRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserRelation) Update() *UserRelationUpdateOne {
	return NewUserRelationClient(ur.config).UpdateOne(ur)
}

// Unwrap unwraps the UserRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ur *UserRelation) Unwrap() *UserRelation {
	_tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserRelation is not a transactional entity")
	}
	ur.config.driver = _tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserRelation) String() string {
	var builder strings.Builder
	builder.WriteString("UserRelation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ur.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ur.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserRelations is a parsable slice of UserRelation.
type UserRelations []*UserRelation
