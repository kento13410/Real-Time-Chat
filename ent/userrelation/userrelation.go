// Code generated by ent, DO NOT EDIT.

package userrelation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userrelation type in the database.
	Label = "user_relation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser1 holds the string denoting the user1 edge name in mutations.
	EdgeUser1 = "user1"
	// EdgeUser2 holds the string denoting the user2 edge name in mutations.
	EdgeUser2 = "user2"
	// Table holds the table name of the userrelation in the database.
	Table = "user_relations"
	// User1Table is the table that holds the user1 relation/edge.
	User1Table = "user_relations"
	// User1InverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	User1InverseTable = "users"
	// User1Column is the table column denoting the user1 relation/edge.
	User1Column = "user_user_relations_1"
	// User2Table is the table that holds the user2 relation/edge.
	User2Table = "user_relations"
	// User2InverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	User2InverseTable = "users"
	// User2Column is the table column denoting the user2 relation/edge.
	User2Column = "user_user_relations_2"
)

// Columns holds all SQL columns for userrelation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_relations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_relations_1",
	"user_user_relations_2",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the UserRelation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUser1Field orders the results by user1 field.
func ByUser1Field(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUser1Step(), sql.OrderByField(field, opts...))
	}
}

// ByUser2Field orders the results by user2 field.
func ByUser2Field(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUser2Step(), sql.OrderByField(field, opts...))
	}
}
func newUser1Step() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(User1InverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, User1Table, User1Column),
	)
}
func newUser2Step() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(User2InverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, User2Table, User2Column),
	)
}
