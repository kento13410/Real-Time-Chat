// Code generated by ent, DO NOT EDIT.

package userrelation

import (
	"Real-Time-Chat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLTE(FieldID, id))
}

// UserID1 applies equality check predicate on the "user_id_1" field. It's identical to UserID1EQ.
func UserID1(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldUserID1, v))
}

// UserID2 applies equality check predicate on the "user_id_2" field. It's identical to UserID2EQ.
func UserID2(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldUserID2, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldCreatedAt, v))
}

// UserID1EQ applies the EQ predicate on the "user_id_1" field.
func UserID1EQ(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldUserID1, v))
}

// UserID1NEQ applies the NEQ predicate on the "user_id_1" field.
func UserID1NEQ(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNEQ(FieldUserID1, v))
}

// UserID1In applies the In predicate on the "user_id_1" field.
func UserID1In(vs ...int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldIn(FieldUserID1, vs...))
}

// UserID1NotIn applies the NotIn predicate on the "user_id_1" field.
func UserID1NotIn(vs ...int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNotIn(FieldUserID1, vs...))
}

// UserID1GT applies the GT predicate on the "user_id_1" field.
func UserID1GT(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGT(FieldUserID1, v))
}

// UserID1GTE applies the GTE predicate on the "user_id_1" field.
func UserID1GTE(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGTE(FieldUserID1, v))
}

// UserID1LT applies the LT predicate on the "user_id_1" field.
func UserID1LT(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLT(FieldUserID1, v))
}

// UserID1LTE applies the LTE predicate on the "user_id_1" field.
func UserID1LTE(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLTE(FieldUserID1, v))
}

// UserID2EQ applies the EQ predicate on the "user_id_2" field.
func UserID2EQ(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldUserID2, v))
}

// UserID2NEQ applies the NEQ predicate on the "user_id_2" field.
func UserID2NEQ(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNEQ(FieldUserID2, v))
}

// UserID2In applies the In predicate on the "user_id_2" field.
func UserID2In(vs ...int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldIn(FieldUserID2, vs...))
}

// UserID2NotIn applies the NotIn predicate on the "user_id_2" field.
func UserID2NotIn(vs ...int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNotIn(FieldUserID2, vs...))
}

// UserID2GT applies the GT predicate on the "user_id_2" field.
func UserID2GT(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGT(FieldUserID2, v))
}

// UserID2GTE applies the GTE predicate on the "user_id_2" field.
func UserID2GTE(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGTE(FieldUserID2, v))
}

// UserID2LT applies the LT predicate on the "user_id_2" field.
func UserID2LT(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLT(FieldUserID2, v))
}

// UserID2LTE applies the LTE predicate on the "user_id_2" field.
func UserID2LTE(v int) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLTE(FieldUserID2, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserRelation {
	return predicate.UserRelation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser1 applies the HasEdge predicate on the "user1" edge.
func HasUser1() predicate.UserRelation {
	return predicate.UserRelation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, User1Table, User1Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUser1With applies the HasEdge predicate on the "user1" edge with a given conditions (other predicates).
func HasUser1With(preds ...predicate.User) predicate.UserRelation {
	return predicate.UserRelation(func(s *sql.Selector) {
		step := newUser1Step()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser2 applies the HasEdge predicate on the "user2" edge.
func HasUser2() predicate.UserRelation {
	return predicate.UserRelation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, User2Table, User2Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUser2With applies the HasEdge predicate on the "user2" edge with a given conditions (other predicates).
func HasUser2With(preds ...predicate.User) predicate.UserRelation {
	return predicate.UserRelation(func(s *sql.Selector) {
		step := newUser2Step()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserRelation) predicate.UserRelation {
	return predicate.UserRelation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserRelation) predicate.UserRelation {
	return predicate.UserRelation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserRelation) predicate.UserRelation {
	return predicate.UserRelation(sql.NotPredicates(p))
}
