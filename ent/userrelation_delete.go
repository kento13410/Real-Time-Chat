// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Real-Time-Chat/ent/predicate"
	"Real-Time-Chat/ent/userrelation"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserRelationDelete is the builder for deleting a UserRelation entity.
type UserRelationDelete struct {
	config
	hooks    []Hook
	mutation *UserRelationMutation
}

// Where appends a list predicates to the UserRelationDelete builder.
func (urd *UserRelationDelete) Where(ps ...predicate.UserRelation) *UserRelationDelete {
	urd.mutation.Where(ps...)
	return urd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (urd *UserRelationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, urd.sqlExec, urd.mutation, urd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (urd *UserRelationDelete) ExecX(ctx context.Context) int {
	n, err := urd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (urd *UserRelationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userrelation.Table, sqlgraph.NewFieldSpec(userrelation.FieldID, field.TypeInt))
	if ps := urd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, urd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	urd.mutation.done = true
	return affected, err
}

// UserRelationDeleteOne is the builder for deleting a single UserRelation entity.
type UserRelationDeleteOne struct {
	urd *UserRelationDelete
}

// Where appends a list predicates to the UserRelationDelete builder.
func (urdo *UserRelationDeleteOne) Where(ps ...predicate.UserRelation) *UserRelationDeleteOne {
	urdo.urd.mutation.Where(ps...)
	return urdo
}

// Exec executes the deletion query.
func (urdo *UserRelationDeleteOne) Exec(ctx context.Context) error {
	n, err := urdo.urd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userrelation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (urdo *UserRelationDeleteOne) ExecX(ctx context.Context) {
	if err := urdo.Exec(ctx); err != nil {
		panic(err)
	}
}
