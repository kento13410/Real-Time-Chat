// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Real-Time-Chat/ent/userrelations"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserRelations is the model entity for the UserRelations schema.
type UserRelations struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID1 holds the value of the "user_id_1" field.
	UserID1 int `json:"user_id_1,omitempty"`
	// UserID2 holds the value of the "user_id_2" field.
	UserID2      int `json:"user_id_2,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserRelations) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userrelations.FieldID, userrelations.FieldUserID1, userrelations.FieldUserID2:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserRelations fields.
func (ur *UserRelations) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userrelations.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ur.ID = int(value.Int64)
		case userrelations.FieldUserID1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id_1", values[i])
			} else if value.Valid {
				ur.UserID1 = int(value.Int64)
			}
		case userrelations.FieldUserID2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id_2", values[i])
			} else if value.Valid {
				ur.UserID2 = int(value.Int64)
			}
		default:
			ur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserRelations.
// This includes values selected through modifiers, order, etc.
func (ur *UserRelations) Value(name string) (ent.Value, error) {
	return ur.selectValues.Get(name)
}

// Update returns a builder for updating this UserRelations.
// Note that you need to call UserRelations.Unwrap() before calling this method if this UserRelations
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserRelations) Update() *UserRelationsUpdateOne {
	return NewUserRelationsClient(ur.config).UpdateOne(ur)
}

// Unwrap unwraps the UserRelations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ur *UserRelations) Unwrap() *UserRelations {
	_tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserRelations is not a transactional entity")
	}
	ur.config.driver = _tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserRelations) String() string {
	var builder strings.Builder
	builder.WriteString("UserRelations(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ur.ID))
	builder.WriteString("user_id_1=")
	builder.WriteString(fmt.Sprintf("%v", ur.UserID1))
	builder.WriteString(", ")
	builder.WriteString("user_id_2=")
	builder.WriteString(fmt.Sprintf("%v", ur.UserID2))
	builder.WriteByte(')')
	return builder.String()
}

// UserRelationsSlice is a parsable slice of UserRelations.
type UserRelationsSlice []*UserRelations
