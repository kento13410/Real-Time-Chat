// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Real-Time-Chat/ent/predicate"
	"Real-Time-Chat/ent/userrelations"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserRelationsUpdate is the builder for updating UserRelations entities.
type UserRelationsUpdate struct {
	config
	hooks    []Hook
	mutation *UserRelationsMutation
}

// Where appends a list predicates to the UserRelationsUpdate builder.
func (uru *UserRelationsUpdate) Where(ps ...predicate.UserRelations) *UserRelationsUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetUserID1 sets the "user_id_1" field.
func (uru *UserRelationsUpdate) SetUserID1(i int) *UserRelationsUpdate {
	uru.mutation.ResetUserID1()
	uru.mutation.SetUserID1(i)
	return uru
}

// SetNillableUserID1 sets the "user_id_1" field if the given value is not nil.
func (uru *UserRelationsUpdate) SetNillableUserID1(i *int) *UserRelationsUpdate {
	if i != nil {
		uru.SetUserID1(*i)
	}
	return uru
}

// AddUserID1 adds i to the "user_id_1" field.
func (uru *UserRelationsUpdate) AddUserID1(i int) *UserRelationsUpdate {
	uru.mutation.AddUserID1(i)
	return uru
}

// SetUserID2 sets the "user_id_2" field.
func (uru *UserRelationsUpdate) SetUserID2(i int) *UserRelationsUpdate {
	uru.mutation.ResetUserID2()
	uru.mutation.SetUserID2(i)
	return uru
}

// SetNillableUserID2 sets the "user_id_2" field if the given value is not nil.
func (uru *UserRelationsUpdate) SetNillableUserID2(i *int) *UserRelationsUpdate {
	if i != nil {
		uru.SetUserID2(*i)
	}
	return uru
}

// AddUserID2 adds i to the "user_id_2" field.
func (uru *UserRelationsUpdate) AddUserID2(i int) *UserRelationsUpdate {
	uru.mutation.AddUserID2(i)
	return uru
}

// Mutation returns the UserRelationsMutation object of the builder.
func (uru *UserRelationsUpdate) Mutation() *UserRelationsMutation {
	return uru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserRelationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserRelationsUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserRelationsUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserRelationsUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uru *UserRelationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userrelations.Table, userrelations.Columns, sqlgraph.NewFieldSpec(userrelations.FieldID, field.TypeInt))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.UserID1(); ok {
		_spec.SetField(userrelations.FieldUserID1, field.TypeInt, value)
	}
	if value, ok := uru.mutation.AddedUserID1(); ok {
		_spec.AddField(userrelations.FieldUserID1, field.TypeInt, value)
	}
	if value, ok := uru.mutation.UserID2(); ok {
		_spec.SetField(userrelations.FieldUserID2, field.TypeInt, value)
	}
	if value, ok := uru.mutation.AddedUserID2(); ok {
		_spec.AddField(userrelations.FieldUserID2, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserRelationsUpdateOne is the builder for updating a single UserRelations entity.
type UserRelationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserRelationsMutation
}

// SetUserID1 sets the "user_id_1" field.
func (uruo *UserRelationsUpdateOne) SetUserID1(i int) *UserRelationsUpdateOne {
	uruo.mutation.ResetUserID1()
	uruo.mutation.SetUserID1(i)
	return uruo
}

// SetNillableUserID1 sets the "user_id_1" field if the given value is not nil.
func (uruo *UserRelationsUpdateOne) SetNillableUserID1(i *int) *UserRelationsUpdateOne {
	if i != nil {
		uruo.SetUserID1(*i)
	}
	return uruo
}

// AddUserID1 adds i to the "user_id_1" field.
func (uruo *UserRelationsUpdateOne) AddUserID1(i int) *UserRelationsUpdateOne {
	uruo.mutation.AddUserID1(i)
	return uruo
}

// SetUserID2 sets the "user_id_2" field.
func (uruo *UserRelationsUpdateOne) SetUserID2(i int) *UserRelationsUpdateOne {
	uruo.mutation.ResetUserID2()
	uruo.mutation.SetUserID2(i)
	return uruo
}

// SetNillableUserID2 sets the "user_id_2" field if the given value is not nil.
func (uruo *UserRelationsUpdateOne) SetNillableUserID2(i *int) *UserRelationsUpdateOne {
	if i != nil {
		uruo.SetUserID2(*i)
	}
	return uruo
}

// AddUserID2 adds i to the "user_id_2" field.
func (uruo *UserRelationsUpdateOne) AddUserID2(i int) *UserRelationsUpdateOne {
	uruo.mutation.AddUserID2(i)
	return uruo
}

// Mutation returns the UserRelationsMutation object of the builder.
func (uruo *UserRelationsUpdateOne) Mutation() *UserRelationsMutation {
	return uruo.mutation
}

// Where appends a list predicates to the UserRelationsUpdate builder.
func (uruo *UserRelationsUpdateOne) Where(ps ...predicate.UserRelations) *UserRelationsUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserRelationsUpdateOne) Select(field string, fields ...string) *UserRelationsUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserRelations entity.
func (uruo *UserRelationsUpdateOne) Save(ctx context.Context) (*UserRelations, error) {
	return withHooks(ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserRelationsUpdateOne) SaveX(ctx context.Context) *UserRelations {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserRelationsUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserRelationsUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uruo *UserRelationsUpdateOne) sqlSave(ctx context.Context) (_node *UserRelations, err error) {
	_spec := sqlgraph.NewUpdateSpec(userrelations.Table, userrelations.Columns, sqlgraph.NewFieldSpec(userrelations.FieldID, field.TypeInt))
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserRelations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userrelations.FieldID)
		for _, f := range fields {
			if !userrelations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userrelations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.UserID1(); ok {
		_spec.SetField(userrelations.FieldUserID1, field.TypeInt, value)
	}
	if value, ok := uruo.mutation.AddedUserID1(); ok {
		_spec.AddField(userrelations.FieldUserID1, field.TypeInt, value)
	}
	if value, ok := uruo.mutation.UserID2(); ok {
		_spec.SetField(userrelations.FieldUserID2, field.TypeInt, value)
	}
	if value, ok := uruo.mutation.AddedUserID2(); ok {
		_spec.AddField(userrelations.FieldUserID2, field.TypeInt, value)
	}
	_node = &UserRelations{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
